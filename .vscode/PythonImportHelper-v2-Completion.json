[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "yt_dlp",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "yt_dlp",
        "description": "yt_dlp",
        "detail": "yt_dlp",
        "documentation": {}
    },
    {
        "label": "cv2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cv2",
        "description": "cv2",
        "detail": "cv2",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "structural_similarity",
        "importPath": "skimage.metrics",
        "description": "skimage.metrics",
        "isExtraImport": true,
        "detail": "skimage.metrics",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "tqdm",
        "importPath": "tqdm",
        "description": "tqdm",
        "isExtraImport": true,
        "detail": "tqdm",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "video_to_frames",
        "importPath": "video_tools",
        "description": "video_tools",
        "isExtraImport": true,
        "detail": "video_tools",
        "documentation": {}
    },
    {
        "label": "ImageProcessor",
        "importPath": "images_tools",
        "description": "images_tools",
        "isExtraImport": true,
        "detail": "images_tools",
        "documentation": {}
    },
    {
        "label": "convert_images_to_pdf",
        "importPath": "convert_to_pdf",
        "description": "convert_to_pdf",
        "isExtraImport": true,
        "detail": "convert_to_pdf",
        "documentation": {}
    },
    {
        "label": "YouTubeDownloader",
        "importPath": "download_youtube",
        "description": "download_youtube",
        "isExtraImport": true,
        "detail": "download_youtube",
        "documentation": {}
    },
    {
        "label": "urlparse",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "convert_images_to_pdf",
        "kind": 2,
        "importPath": "convert_to_pdf",
        "description": "convert_to_pdf",
        "peekOfCode": "def convert_images_to_pdf(input_folder, output_pdf):\n    image_files = [\n        f\n        for f in os.listdir(input_folder)\n        if f.endswith((\".png\", \".jpg\", \".jpeg\", \".bmp\", \".tiff\"))\n    ]\n    image_files.sort()\n    image_list = []\n    for image_file in image_files:\n        image_path = os.path.join(input_folder, image_file)",
        "detail": "convert_to_pdf",
        "documentation": {}
    },
    {
        "label": "YouTubeDownloader",
        "kind": 6,
        "importPath": "download_youtube",
        "description": "download_youtube",
        "peekOfCode": "class YouTubeDownloader:\n    def __init__(self):\n        self.default_download_path = \"./downloads\"\n    def download_youtube_video(self, url, save_path=None):\n        \"\"\"Download YouTube video and return the path to downloaded file.\"\"\"\n        if save_path is None:\n            save_path = self.default_download_path\n        try:\n            os.makedirs(save_path, exist_ok=True)\n            ydl_opts = {",
        "detail": "download_youtube",
        "documentation": {}
    },
    {
        "label": "ImageProcessor",
        "kind": 6,
        "importPath": "images_tools",
        "description": "images_tools",
        "peekOfCode": "class ImageProcessor:\n    def __init__(self, similarity_threshold=0.9):\n        self.similarity_threshold = similarity_threshold\n    def compare_images(self, imageA, imageB):\n        \"\"\"\n        Compare two images using Structural Similarity Index (SSIM).\n        Args:\n            imageA: First image\n            imageB: Second image\n        Returns:",
        "detail": "images_tools",
        "documentation": {}
    },
    {
        "label": "is_youtube_url",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def is_youtube_url(url):\n    \"\"\"Check if the provided string is a YouTube URL.\"\"\"\n    try:\n        parsed = urlparse(url)\n        return \"youtube.com\" in parsed.netloc or \"youtu.be\" in parsed.netloc\n    except:\n        return False\ndef process_video(video_path, output_folder, interval, remove_similar, create_pdf):\n    \"\"\"Process video with frame extraction and optional features.\"\"\"\n    try:",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "process_video",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def process_video(video_path, output_folder, interval, remove_similar, create_pdf):\n    \"\"\"Process video with frame extraction and optional features.\"\"\"\n    try:\n        os.makedirs(output_folder, exist_ok=True)\n        # Extract frames\n        print(f\"Extracting frames every {interval} seconds...\")\n        video_to_frames(video_path, output_folder, interval)\n        # Remove similar images if requested\n        if remove_similar:\n            print(\"Removing similar images...\")",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def main():\n    parser = argparse.ArgumentParser(\n        description=\"Process a video (local file or YouTube URL) to extract frames, remove similar images, and convert to PDF.\"\n    )\n    parser.add_argument(\n        \"-v\", \"--video\", required=True, help=\"Path to local video file or YouTube URL\"\n    )\n    parser.add_argument(\n        \"-o\", \"--output\", default=\"images\", help=\"Output folder for extracted images\"\n    )",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "video_to_frames",
        "kind": 2,
        "importPath": "video_tools",
        "description": "video_tools",
        "peekOfCode": "def video_to_frames(video_path, output_folder, interval_seconds):\n    if not os.path.exists(output_folder):\n        os.makedirs(output_folder)\n    cap = cv2.VideoCapture(video_path)\n    fps = int(cap.get(cv2.CAP_PROP_FPS))\n    interval_frames = int(fps * interval_seconds)\n    count = 0\n    frame_number = 0\n    while True:\n        ret, frame = cap.read()",
        "detail": "video_tools",
        "documentation": {}
    }
]